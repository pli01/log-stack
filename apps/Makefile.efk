EFK_SERVICE_NAME         = efk
EFK_DOCKER_COMPOSE_BUILD = ${DC_PREFIX}-build-$(EFK_SERVICE_NAME).yml
EFK_DOCKER_COMPOSE_RUN   = ${DC_PREFIX}-run-$(EFK_SERVICE_NAME).yml
EFK_PULL_IMAGES          = elasticsearch nginx kibana
EFK_PUSH_IMAGES          = curator fluentd
EFK_BUILD_IMAGES         = elasticsearch curator kibana nginx fluentd

# Image name:version
export nginx_image_full         = nginx:1.14
export elasticsearch_image_full = docker.elastic.co/elasticsearch/elasticsearch-oss:6.2.4
export kibana_image_full        = docker.elastic.co/kibana/kibana-oss:6.2.4
export curator_image_full       = ${APP}-curator:stretch
export fluentd_image_full       = ${APP}-fluentd:v1.1.3-debian

BEAT_ENABLE = 1
ifeq ($(BEAT_ENABLE),1)
BEAT_SERVICE_NAME       = beat
BEAT_DOCKER_COMPOSE_RUN = ${DC_PREFIX}-run-$(BEAT_SERVICE_NAME).yml
BEAT_PULL_IMAGES        = metricbeat
BEAT_BUILD_IMAGES       = metricbeat
EFK_BUILD_IMAGES        += heartbeat
EFK_PULL_IMAGES         += heartbeat
endif
export metricbeat_image_full    = docker.elastic.co/beats/metricbeat:6.6.2
export heartbeat_image_full     = docker.elastic.co/beats/heartbeat:6.6.2

DOCKER_REGISTRY   ?= ghcr.io
DOCKER_REPOSITORY ?= pli01/${APP}
DOCKER_REGISTRY_USERNAME ?=
DOCKER_REGISTRY_TOKEN ?=

# Env build (ARG)
export MIRROR_DEBIAN = $(shell echo $$MIRROR_DEBIAN )
export RUBY_URL = $(shell echo $$RUBY_URL )
export PYPI_URL = $(shell echo $$PYPI_URL )
export PYPI_HOST = $(shell echo $$PYPI_HOST )

# Env run (ENV)
export efk_stack_conf_dir = ${APP_PATH}/$(EFK_SERVICE_NAME)-conf
export efk_stack_data_dir = ${APP_DATA}
export kibana_access_conf_file = ${efk_stack_conf_dir}/nginx/efk_blockips.conf
export OPENRC_PATH := ${APP_DATA}

export


$(EFK_SERVICE_NAME)-clean: $(EFK_SERVICE_NAME)-clean-image

$(EFK_SERVICE_NAME)-build: $(EFK_SERVICE_NAME)-check-config-image $(EFK_SERVICE_NAME)-pull-image
	@echo building ${APP} $(EFK_SERVICE_NAME)
	( cd ${APP_PATH} && ${DC} -f $(EFK_DOCKER_COMPOSE_BUILD) build ${DC_BUILD_ARGS} )

$(EFK_SERVICE_NAME)-list-services:
	@( cd ${APP_PATH} && ${DC} -f $(EFK_DOCKER_COMPOSE_BUILD) config --services )

$(EFK_SERVICE_NAME)-check-config-image:
	@( cd ${APP_PATH} && ${DC} -f $(EFK_DOCKER_COMPOSE_BUILD) config -q )

$(EFK_SERVICE_NAME)-pull-image:
	@echo pull ${APP} $(EFK_SERVICE_NAME)
	if [ ! -z "$(EFK_PULL_IMAGES)" ] ; then ( cd ${APP_PATH} && bash retry_cmd.sh ${DC} -f $(EFK_DOCKER_COMPOSE_BUILD) pull $(EFK_PULL_IMAGES) ) ; fi

$(EFK_SERVICE_NAME)-save-image:
	for service in $(EFK_BUILD_IMAGES) ; do \
	image_name=$$(cd ${APP_PATH} && ${DC} -f $(EFK_DOCKER_COMPOSE_BUILD) config | \
	python -c 'import sys, yaml, json; cfg = json.loads(json.dumps(yaml.safe_load(sys.stdin), sys.stdout, indent=4)); print cfg["services"]["'$$service'"]["image"]') ; \
	  docker image save $$image_name | gzip -9c >  $(BUILD_DIR)/$(APP)-$(EFK_SERVICE_NAME)-$$service-$(APP_VERSION)-image.tar.gz ; \
	  cp $(BUILD_DIR)/$(APP)-$(EFK_SERVICE_NAME)-$$service-$(APP_VERSION)-image.tar.gz $(BUILD_DIR)/$(APP)-$(EFK_SERVICE_NAME)-$$service-latest-image.tar.gz ; \
	done

registry-login:
	@if [ -z "${DOCKER_REGISTRY_TOKEN}" -a -z "${DOCKER_REGISTRY_USERNAME}" ] ; then echo "ERROR: DOCKER_REGISTRY_TOKEN and DOCKER_REGISTRY_USERNAME not defined" ; exit 1 ; fi
	@[ -n "${DOCKER_REGISTRY_TOKEN}" -a -n "${DOCKER_REGISTRY_USERNAME}" ] && echo "${DOCKER_REGISTRY_TOKEN}" | docker login ${DOCKER_REGISTRY} -u ${DOCKER_REGISTRY_USERNAME}  --password-stdin

registry-logout:
	@[ -n "${DOCKER_REGISTRY}" ] && docker logout ${DOCKER_REGISTRY} || true

$(EFK_SERVICE_NAME)-push-image: registry-login
	for service in $(EFK_PUSH_IMAGES) ; do \
	image_name=$$(cd ${APP_PATH} && ${DC} -f $(EFK_DOCKER_COMPOSE_BUILD) config | \
	python -c 'import sys, yaml, json; cfg = json.loads(json.dumps(yaml.safe_load(sys.stdin), sys.stdout, indent=4)); print cfg["services"]["'$$service'"]["image"]') ; \
         docker tag $$image_name ${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}/$$image_name ; \
         docker push ${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}/$$image_name ; \
	done

$(EFK_SERVICE_NAME)-clean-image:
	@(cd ${APP_PATH} && ${DC} -f $(EFK_DOCKER_COMPOSE_BUILD) config | \
           python -c 'import sys, yaml, json; json.dump(yaml.safe_load(sys.stdin), sys.stdout, indent=4)' | \
           jq -r '.services[] | . as $(dollar)a | select($(dollar)a.build) | .image' ) | while read image_name ; do \
           docker rmi $$image_name || true ; \
        done

$(EFK_SERVICE_NAME)-publish:
	@echo "Publish $(APP) $(APP_VERSION) $(EFK_SERVICE_NAME) artifacts"
	if [ -z "$(dml_url)" -o -z "$(openstack_token)" ] ; then exit 1 ; fi
	( cd $(BUILD_DIR) ;\
	    for service in \
                $(EFK_BUILD_IMAGES) \
           ; do \
            file=$(APP)-$(EFK_SERVICE_NAME)-$$service-$(APP_VERSION)-image.tar.gz ; \
            latest=$(APP)-$(EFK_SERVICE_NAME)-$$service-latest-image.tar.gz ; \
            curl $(curl_args) -k -X PUT -T $$file -H 'X-Auth-Token: $(openstack_token)' $(dml_url)/$(publish_dir)/$(APP_VERSION)/$$file ; \
            curl $(curl_args) -k -X PUT -T $$latest -H 'X-Auth-Token: $(openstack_token)' $(dml_url)/$(publish_dir)/latest/$$latest ; \
           done ; \
	)

$(EFK_SERVICE_NAME)-load-image:
	( cd ${APP_PATH} && ${DC} -f $(EFK_DOCKER_COMPOSE_RUN) -f $(BEAT_DOCKER_COMPOSE_RUN) config --services | while read service; do \
	  docker load -i $(BUILD_DIR)/$(APP)-$(EFK_SERVICE_NAME)-$$service-$(APP_VERSION)-image.tar.gz ; \
	 done )

$(EFK_SERVICE_NAME)-get-build-image: build-dir
	( cd ${APP_PATH} && ${DC} -f $(EFK_DOCKER_COMPOSE_RUN) -f $(BEAT_DOCKER_COMPOSE_RUN) config --services | while read service; do \
            file=$(APP)-$(EFK_SERVICE_NAME)-$$service-$(APP_VERSION)-image.tar.gz ; \
            curl $(curl_args) -k -X GET -L $(dml_url)/$(publish_dir)/$(APP_VERSION)/$$file -o $(BUILD_DIR)/$$file ; \
	 done )

$(EFK_SERVICE_NAME)-genere-config:
	@echo "## generate kibana ip access restriction"
	grep "^#" ${kibana_access_conf_file}.template | tee ${kibana_access_conf_file}.new && \
	  ( echo '${KIBANA_ACCESS_LIST}' | \
            jq -r 'if to_entries|length>0 then to_entries | map(if .value|length>0 then "allow \(.value);" else empty end ) | .[] else empty end' ; \
            echo 'deny all;' ) | tee -a ${kibana_access_conf_file}.new ; \
         mv ${kibana_access_conf_file}.new ${kibana_access_conf_file}

$(EFK_SERVICE_NAME)-pull-all: $(EFK_SERVICE_NAME)-pull $(BEAT_SERVICE_NAME)-pull

$(EFK_SERVICE_NAME)-pull: $(EFK_SERVICE_NAME)-pull-common $(EFK_SERVICE_NAME)-pull-custom

$(EFK_SERVICE_NAME)-pull-common:
	if [ ! -z "$(EFK_PULL_IMAGES)" ] ; then ( cd ${APP_PATH} && bash retry_cmd.sh ${DC} -f $(EFK_DOCKER_COMPOSE_RUN) pull $(EFK_PULL_IMAGES) ) ; fi

$(EFK_SERVICE_NAME)-pull-custom: # registry-login
	for service in $(EFK_PUSH_IMAGES) ; do \
	image_name=$$(cd ${APP_PATH} && ${DC} -f $(EFK_DOCKER_COMPOSE_BUILD) config | \
	python -c 'import sys, yaml, json; cfg = json.loads(json.dumps(yaml.safe_load(sys.stdin), sys.stdout, indent=4)); print cfg["services"]["'$$service'"]["image"]') ; \
         docker pull ${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}/$$image_name ; \
         docker tag ${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}/$$image_name $$image_name ; \
         done

$(EFK_SERVICE_NAME)-data-dir:
	[ -d "${efk_stack_data_dir}" ] || mkdir -p "${efk_stack_data_dir}"
$(EFK_SERVICE_NAME)-clean-data-dir:
	[ -d "${efk_stack_data_dir}" ] && rm -rf "${efk_stack_data_dir}"

$(BEAT_SERVICE_NAME)-pull:
	if [ ! -z "$(BEAT_PULL_IMAGES)" ] ; then ( cd ${APP_PATH} && bash retry_cmd.sh ${DC} -f $(BEAT_DOCKER_COMPOSE_RUN) pull $(BEAT_PULL_IMAGES) ) ; fi


$(EFK_SERVICE_NAME)-up-all: $(EFK_SERVICE_NAME)-up $(BEAT_SERVICE_NAME)-up
$(EFK_SERVICE_NAME)-up: $(EFK_SERVICE_NAME)-genere-config $(EFK_SERVICE_NAME)-data-dir
	@[ -f ${OPENRC_PATH}/.openrc.sh ] && source ${OPENRC_PATH}/.openrc.sh ; \
	   ( cd ${APP_PATH} && ${DC} -f $(EFK_DOCKER_COMPOSE_RUN) up -d 2>&1 | grep -v orphan )

$(BEAT_SERVICE_NAME)-up:
	@echo "start $(BEAT_SERVICE_NAME)" ; \
		ELASTICSEARCH_ID=$$(${DC} -f $(EFK_DOCKER_COMPOSE_RUN) ps -q elasticsearch) ; \
		KIBANA_ID=$$(${DC} -f $(EFK_DOCKER_COMPOSE_RUN) ps -q kibana) ; \
		export ELASTICSEARCH_HOST=$$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $$ELASTICSEARCH_ID) ; \
		export KIBANA_HOST=$$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $$KIBANA_ID) ; \
		( cd ${APP_PATH} && ${DC} -f $(BEAT_DOCKER_COMPOSE_RUN) up -d 2>&1 | grep -v orphan )

$(EFK_SERVICE_NAME)-stop-all: $(EFK_SERVICE_NAME)-stop $(BEAT_SERVICE_NAME)-stop
$(EFK_SERVICE_NAME)-stop:
	@( cd ${APP_PATH} && ${DC} -f $(EFK_DOCKER_COMPOSE_RUN) stop )
$(BEAT_SERVICE_NAME)-stop:
	@( cd ${APP_PATH} && ${DC} -f $(BEAT_DOCKER_COMPOSE_RUN) stop )

$(EFK_SERVICE_NAME)-rm-all: $(EFK_SERVICE_NAME)-rm $(BEAT_SERVICE_NAME)-rm
$(EFK_SERVICE_NAME)-rm:
	@( cd ${APP_PATH} && ${DC} -f $(EFK_DOCKER_COMPOSE_RUN) rm )
$(BEAT_SERVICE_NAME)-rm:
	@( cd ${APP_PATH} && ${DC} -f $(BEAT_DOCKER_COMPOSE_RUN) rm )

$(EFK_SERVICE_NAME)-down-all: $(BEAT_SERVICE_NAME)-down $(EFK_SERVICE_NAME)-down
$(EFK_SERVICE_NAME)-down:
	@( cd ${APP_PATH} && ${DC} -f $(EFK_DOCKER_COMPOSE_RUN) down )
$(BEAT_SERVICE_NAME)-down:
	@( cd ${APP_PATH} && ${DC} -f $(BEAT_DOCKER_COMPOSE_RUN) down )


$(EFK_SERVICE_NAME)-test-up: $(EFK_SERVICE_NAME)-test-up-all

$(EFK_SERVICE_NAME)-test-up-%:
	@( cd ${APP_PATH} && tests/test-up-$*.sh )
